apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-database
  labels:
    app: {{ .Release.Name }}-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-database
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-database
    spec:
      containers:
      - name: database
        image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}"
        imagePullPolicy: {{ .Values.database.image.pullPolicy }}
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: {{ .Values.database.env.POSTGRES_DB }}
        - name: POSTGRES_USER
          value: {{ .Values.database.env.POSTGRES_USER }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-db-secret
              key: POSTGRES_PASSWORD
        {{- if .Values.database.healthcheck.enabled }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U {{ .Values.database.env.POSTGRES_USER }} -d {{ .Values.database.env.POSTGRES_DB }}
          initialDelaySeconds: {{ .Values.database.healthcheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.database.healthcheck.periodSeconds }}
          timeoutSeconds: {{ .Values.database.healthcheck.timeoutSeconds }}
          failureThreshold: {{ .Values.database.healthcheck.failureThreshold }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U {{ .Values.database.env.POSTGRES_USER }} -d {{ .Values.database.env.POSTGRES_DB }}
          initialDelaySeconds: {{ .Values.database.healthcheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.database.healthcheck.periodSeconds }}
          timeoutSeconds: {{ .Values.database.healthcheck.timeoutSeconds }}
          failureThreshold: {{ .Values.database.healthcheck.failureThreshold }}
        {{- end }}
        resources:
          {{- toYaml .Values.database.resources | nindent 10 }}
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        {{- if .Values.database.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-db-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}

# templates/database-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-database
  labels:
    app: {{ .Release.Name }}-database
spec:
  type: {{ .Values.database.service.type }}
  ports:
  - port: {{ .Values.database.service.port }}
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app: {{ .Release.Name }}-database

# templates/database-pvc.yaml
{{- if .Values.database.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-db-pvc
  labels:
    app: {{ .Release.Name }}-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.database.persistence.size }}
  {{- if .Values.database.persistence.storageClass }}
  storageClassName: {{ .Values.database.persistence.storageClass }}
  {{- end }}
{{- end }}
